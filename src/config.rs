use std::{collections::HashMap, convert, env, fmt, str};

use crate::Error;

const DEFAULT_FILE: &str = "friday.md";

#[derive(Debug)]
pub enum Action {
    Show,
    Add,
    Help,
    Edit,
}

impl convert::TryFrom<&str> for Action {
    type Error = Error;
    fn try_from(value: &str) -> Result<Self, Self::Error> {
        match value {
            "add" => Ok(Action::Add),
            "show" => Ok(Action::Show),
            "edit" => Ok(Action::Edit),
            "help" | "" => Ok(Action::Help),
            cmd => Err(Error::InvalidCommand(cmd.to_string())),
        }
    }
}

impl str::FromStr for Action {
    type Err = Error;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        Action::try_from(s)
    }
}

impl fmt::Display for Action {
    // This uses the autogenerated debug trait from `#[derive(Debug)]`
    // to display the enum name.
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{:?}", self)
    }
}

#[derive(Debug)]
pub struct Config {
    pub action: Action,
    pub input: Option<String>,
    pub file: String,
}

impl Config {
    pub fn build(
        mut args: impl Iterator<Item = String>,
        env_vars: HashMap<String, String>,
    ) -> Result<Config, Error> {
        // first item is binary name
        args.next();

        let action: Action = args.next().unwrap_or_default().as_str().parse()?;

        let input = args.reduce(|mut iter, arg| {
            iter += &format!(" {arg}");
            iter
        });

        let mut file = env_vars.get("FRIDAY_FILE").cloned().unwrap_or_default();
        if file.trim().is_empty() {
            let home = dirs::home_dir().ok_or_else(|| {
                Error::InvalidArgument("failed to get users home dir".to_string())
            })?;
            // since home dir is always a valid path and `DEFAULT_FILE` also
            // there won't be any loss when converting.
            file = home.join(DEFAULT_FILE).to_string_lossy().to_string();
        }

        Ok(Config {
            action,
            input,
            file,
        })
    }
}

// TODO: add tests https://doc.rust-lang.org/stable/book/ch11-00-testing.html
